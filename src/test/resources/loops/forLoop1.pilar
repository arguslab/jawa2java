record `com.fgwei.ForLoop1`  @kind class @AccessFlag PUBLIC {
   }
    procedure `int` `com.fgwei.ForLoop1.main` () @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.main:()I` @AccessFlag PUBLIC_STATIC {
    `int` int_v2;
    `int` int_v1;
    `int` int_v0;

  #L02b558.  int_v1:= 0I;
  #L02b55a.  int_v0:= 0I;
  #L02b55c.  int_v2:= 50I;
  #L02b560.  if int_v0 >= int_v2 then goto L02b56c;
  #L02b564.  int_v1:= int_v1 + int_v0  @kind int;
  #L02b566.  int_v0:= int_v0 + 1;
  #L02b56a.  goto L02b55c;
  #L02b56c.  return int_v1;

   }
   
   
    procedure `int` `com.fgwei.ForLoop1.whileLoop` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.whileLoop:()I` @AccessFlag PRIVATE {
       `int` int_v2;
       `int` int_v1;
       `int` int_v0;
         
       #L02b554.  int_v1:= 0I;
       #L02b556.  int_v0:= 0I;
       #L02b558.  int_v2:= 50I;
       #L02b55c.  if int_v0 >= int_v2 then goto L02b568;
       #L02b560.  int_v1:= int_v1 + int_v0  @kind int;
       #L02b562.  int_v0:= int_v0 + 1;
       #L02b566.  goto L02b558;
       #L02b568.  return int_v1;

   }

   procedure `int` `com.fgwei.ForLoop1.whileLoop2` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.whileLoop2:()I` @AccessFlag PRIVATE {
        `int` int_v2;
        `int` int_v1;
        `int` int_v0;

        #L02b5c4.  int_v1:= 0I;
        #L02b5c6.  int_v0:= 0I;
        #L02b5c8.  int_v2:= 50I;
        #L02b5cc.  if int_v0 >= int_v2 then goto L02b5d8;
        #L02b5d0.  int_v1:= int_v1 + int_v0  @kind int;
        #L02b5d2.  int_v0:= int_v0 + 1;
        #L02b5d6.  goto L02b5c8;
        #L02b5d8.  int_v1:= int_v1 * 2;
        #L02b5dc.  return int_v1;

   }

    // infinite loop
     procedure `int` `com.fgwei.ForLoop1.whileLoopConditional` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.whileLoopConditional:()I` @AccessFlag PRIVATE {
          `int` int_v2;
             `int` int_v1;
             `int` int_v0;

           #L02b5e8.  int_v1:= 0I;
           #L02b5ea.  int_v0:= 0I;
           #L02b5ec.  int_v2:= 50I;
           #L02b5f0.  if int_v0 >= int_v2 then goto L02b608;
           #L02b5f4.  int_v1:= int_v1 + int_v0  @kind int;
           #L02b5f6.  int_v0:= int_v0 + 1;
           #L02b5fa.  int_v2:= 20I;
           #L02b5fe.  if int_v1 <= int_v2 then goto L02b5ec;
           #L02b602.  int_v1:= int_v1 * 2;
           #L02b606.  goto L02b5ec;
           #L02b608.  int_v1:= int_v1 * 2;
           #L02b60c.  return int_v1;

     }


   procedure `int` `com.fgwei.ForLoop1.nestedWhile2` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.nestedWhile2:()I` @AccessFlag PRIVATE {
         `int` int_v2;
            `int` int_v0;
            `int` int_v3;
            `int` int_v1;

          #L02b95c.  int_v2:= 0I;
          #L02b95e.  int_v0:= 0I;
          #L02b960.  int_v3:= 50I;
          #L02b964.  if int_v0 >= int_v3 then goto L02b97c;             //while (!(int_v0 >= int_v3)) {
          #L02b968.  int_v2:= int_v2 + int_v0  @kind int;               //  int_v2 = int_v2 + int_v0
          #L02b96a.  int_v0:= int_v0 + 1;                               //  int_v0 = int_v0 + 1;
          #L02b96e.  int_v1:= 0I;                                       //  int_v1:= 0I;
          #L02b970.  if int_v1 >= int_v0 then goto L02b960;             //  while( !(int_v1 >= int_v0)) {
          #L02b974.  int_v2:= int_v2 + int_v1  @kind int;               //      int_v2:= int_v2 + int_v1  @kind int;
          #L02b976.  int_v1:= int_v1 + 1;                               //      int_v1:= int_v1 + 1;
          #L02b97a.  goto L02b970;                                      //  }
          #L02b97c.  return int_v2;                                     //}
                                                                        //  return int_v2;
   }

   procedure `int` `com.fgwei.ForLoop1.whileLoopConditional1` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.whileLoopConditional1:()I` @AccessFlag PRIVATE {
        `int` int_v2;
           `int` int_v1;
           `int` int_v0;

         #L02b62c.  int_v1:= 0I;
         #L02b62e.  int_v0:= 0I;
         #L02b630.  int_v2:= 50I;
         #L02b634.  if int_v0 >= int_v2 then goto L02b652;
         #L02b638.  int_v1:= int_v1 + int_v0  @kind int;
         #L02b63a.  int_v0:= int_v0 + 1;
         #L02b63e.  int_v2:= 20I;
         #L02b642.  if int_v1 <= int_v2 then goto L02b64c;
         #L02b646.  int_v1:= int_v1 * 2;
         #L02b64a.  goto L02b630;
         #L02b64c.  int_v1:= int_v1 / 2;
         #L02b650.  goto L02b630;
         #L02b652.  int_v1:= int_v1 * 2;
         #L02b656.  return int_v1;

   }

   procedure `int` `com.fgwei.ForLoop1.nestedWhile` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.nestedWhile:()I` @AccessFlag PRIVATE {
         `int` int_v2;
            `int` int_v0;
            `int` int_v3;
            `int` int_v1;

          #L02b8b0.  int_v2:= 0I;
          #L02b8b2.  int_v0:= 0I;
          #L02b8b4.  int_v3:= 50I;
          #L02b8b8.  if int_v0 >= int_v3 then goto L02b8d2;
          #L02b8bc.  int_v2:= int_v2 + int_v0  @kind int;
          #L02b8be.  int_v1:= 0I;
          #L02b8c0.  if int_v1 >= int_v0 then goto L02b8cc;
          #L02b8c4.  int_v2:= int_v2 + int_v1  @kind int;
          #L02b8c6.  int_v1:= int_v1 + 1;
          #L02b8ca.  goto L02b8c0;
          #L02b8cc.  int_v0:= int_v0 + 1;
          #L02b8d0.  goto L02b8b4;
          #L02b8d2.  int_v2:= int_v2 * 2;
          #L02b8d6.  return int_v2;
   }




   procedure `int` `com.fgwei.ForLoop1.nestedWhileConditional` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.nestedWhileConditional:()I` @AccessFlag PRIVATE {
          `int` int_v2;                                                      //  private int nestedWhileConditional() {
             `int` int_v0;                                                   //     int int_v2;
             `int` int_v3;                                                   //     int int_v0;
             `int` int_v1;                                                   //     int int_v3;
                                                                             //     int int_v1;
           #L02b94c.  int_v2:= 0I;                                           //    int_v2 = 0;
           #L02b94e.  int_v0:= 0I;                                           //    int_v0 = 0;
           #L02b950.  int_v3:= 50I;                                          //    int_v3 = 50;
                                                                             //    while(!(int_v0 >= int_v3)) {
           #L02b954.  if int_v0 >= int_v3 then goto L02b980;                 //      int_v2 = int_v2 + int_v0;
           #L02b958.  int_v2:= int_v2 + int_v0  @kind int;                   //      int_v1 = 0;
           #L02b95a.  int_v1:= 0I;                                           //      while(!(int_v1 >= int_v0)) {
                                                                             //        int_v2 = int_v2 + int_v1;
            #L02b95c.  if int_v1 >= int_v0 then goto L02b97a;                //        int_v3 = 1000;
               #L02b960.  int_v2:= int_v2 + int_v1  @kind int;               //        if(int_v2 <= int_v3) {
               #L02b962.  int_v3:= 1000I;                                    //          int_v2 = int_v2 + 1;
                    #L02b966.  if int_v2 <= int_v3 then goto L02b974;        //        }
                    #L02b96a.  int_v2:= int_v2 + 251;                        //        else {
               #L02b96e.  int_v1:= int_v1 + 1;                               //          int_v2 = int_v2 + 251;
               #L02b972.  goto L02b95c;                                      //        }
                    #L02b974.  int_v2:= int_v2 + 1;                          //        int_v1 = int_v1 + 1;
                    #L02b978.  goto L02b96e;                                 //      }
               #L02b97a.  int_v0:= int_v0 + 1;                               //      int_v0 = int_v0 + 1;
            #L02b97e.  goto L02b950;                                         //      int_v3 = 50;
           #L02b980.  int_v2:= int_v2 * 2;                                   //    }
           #L02b984.  return int_v2;                                         //    int_v2 = int_v2 * 2;
                                                                             //    return int_v2;
                                                                             //  }
   }

   procedure `int` `com.fgwei.ForLoop1.nestedWhileConditional1` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.nestedWhileConditional1:()I` @AccessFlag PRIVATE {
          `int` int_v2;                                                                     // private int nestedWhileConditional1() {
             `int` int_v0;                                                                  //    int int_v2;
             `int` int_v3;                                                                  //    int int_v0;
             `int` int_v4;                                                                  //    int int_v3;
             `int` int_v1;                                                                  //    int int_v4;
                                                                                            //    int int_v1;
           #L02b9ec.  int_v4:= 1000I;                                                       //   int_v4 = 1000;
           #L02b9f0.  int_v2:= 0I;                                                          //   int_v2 = 0;
           #L02b9f2.  int_v0:= 0I;                                                          //   int_v0 = 0;
           #L02b9f4.  int_v3:= 50I;                                                         //   int_v3 = 50;
           #L02b9f8.  if int_v0 >= int_v3 then goto L02ba28;                                //   while(!(int_v0 >= int_v3)) {
           #L02b9fc.  int_v2:= int_v2 + int_v0  @kind int;                                  //     int_v2 = int_v2 + int_v0;
           #L02b9fe.  int_v1:= 0I;                                                          //     int_v1 = 0;
           #L02ba00.  if int_v1 >= int_v0 then goto L02ba22;                                //     while(!(int_v1 >= int_v0)) {
           #L02ba04.  int_v2:= int_v2 + int_v1  @kind int;                                  //       int_v2 = int_v2 + int_v1;

            #L02ba06.  if int_v2 <= int_v4 then goto L02ba18;                                //       if(int_v2 <= int_v4) {
           #L02ba0a.  int_v2:= int_v2 + 251;                                                //         int_v2 = int_v2 + 1;

           #L02ba0e.  if int_v2 <= int_v4 then goto L02ba1c;                                //         int_v1 = int_v1 + 1;
           #L02ba12.  int_v2:= int_v2 / 2;                                                  //       }
           #L02ba16.  goto L02ba0e;                                                         //       else {

            #L02ba18.  int_v2:= int_v2 + 1;                                                  //         int_v2 = int_v2 + 251;
            #L02ba1c.  int_v1:= int_v1 + 1;                                                  //         while(!(int_v2 <= int_v4)) {
             #L02ba20.  goto L02ba00;                                                         //           int_v2 = int_v2 / 2;

           #L02ba22.  int_v0:= int_v0 + 1;                                                  //         }
           #L02ba26.  goto L02b9f4;                                                         //       }
           #L02ba28.  int_v2:= int_v2 * 2;                                                  //     }
           #L02ba2c.  return int_v2;                                                        //     int_v0 = int_v0 + 1;
   }                                                                                        //     int_v3 = 50;
                                                                                            //   }
                                                                                            //   int_v2 = int_v2 * 2;
                                                                                            //   return int_v2;
                                                                                            // }
                                                                                            //
                                                                                            //
                                                                                            //
   procedure `int` `com.fgwei.ForLoop1.nestedWhileConditional2` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.nestedWhileConditional2:()I` @AccessFlag PRIVATE {
           `int` int_v2;
              `int` int_v1;
              `int` int_v0;

            #L02ba54.  int_v2:= 1000I;
            #L02ba58.  int_v1:= 10001I;
            #L02ba5c.  int_v0:= 0I;
            #L02ba5e.  if int_v1 <= int_v2 then goto L02ba70;
            #L02ba62.  int_v1:= int_v1 + 251;
            #L02ba66.  if int_v1 <= int_v2 then goto L02ba74;
            #L02ba6a.  int_v1:= int_v1 / 2;
            #L02ba6e.  goto L02ba66;
            #L02ba70.  int_v1:= int_v1 + 1;
            #L02ba74.  int_v1:= int_v1 * 2;
            #L02ba78.  return int_v1;
   }

   procedure `int` `com.fgwei.ForLoop1.nestedWhileConditional3` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.nestedWhileConditional3:()I` @AccessFlag PRIVATE {
            `int` int_v5;                                                                         //   int int_v5;
               `int` int_v2;                                                                      //   int int_v2;
               `int` int_v0;                                                                      //   int int_v0;
               `int` int_v3;                                                                      //   int int_v3;
               `int` int_v4;                                                                      //   int int_v4;
               `int` int_v1;                                                                      //   int int_v1;
                                                                                                  //  int_v5 = 1500;
             #L02ba9c.  int_v5:= 1500I;                                                           //  int_v4 = 1000;
             #L02baa0.  int_v4:= 1000I;                                                           //  int_v2 = 0;
             #L02baa4.  int_v2:= 0I;                                                              //  int_v0 = 0;
             #L02baa6.  int_v0:= 0I;                                                              //  int_v3 = 50;
             #L02baa8.  int_v3:= 50I;                                                             //  while(!(int_v0 >= int_v3)) {
//while loop
             #L02baac.  if int_v0 >= int_v3 then goto L02bb08;                                    //    int_v2 = int_v2 + int_v0;
             #L02bab0.  int_v2:= int_v2 + int_v0  @kind int;                                      //    int_v1 = 0;
             #L02bab2.  int_v1:= 0I;                                                              //    while(!(int_v1 >= int_v0)) {
    //while loop
             #L02bab4.  if int_v1 >= int_v0 then goto L02bb02;                                    //      int_v2 = int_v2 + int_v1;
             #L02bab8.  int_v2:= int_v2 + int_v1  @kind int;                                      //      if(int_v2 <= int_v4) {

        //If Statement
             #L02baba.  if int_v2 <= int_v4 then goto L02bad6;                                    //        int_v2 = int_v2 + 1;
                                                                                                  //        while(!(int_v2 <= int_v4)) {
             #L02babe.  int_v2:= int_v2 + 251;                                                    //          int_v3 = 1200;
//~~~~~~      //While loop
             #L02bac2.  if int_v2 <= int_v4 then goto L02bafc;                                    //          if(int_v2 >= int_v3) {
                //If Statement
                #L02bac6.  if int_v2 >= int_v5 then goto L02bad0;                                    //            if(int_v2 >= int_v5) {
                #L02baca.  int_v2:= int_v2 / 2;                                                      //              int_v2 = int_v2 / 5;
                #L02bace.  goto L02bac2;                                                             //            }
                #L02bad0.  int_v2:= int_v2 / 3;                                                      //            else {
                #L02bad4.  goto L02bac2;                                                             //              int_v2 = int_v2 / 3;

        //Else part
             #L02bad6.  int_v2:= int_v2 + 1;                                                      //            }
            //while loop
             #L02bada.  if int_v2 <= int_v4 then goto L02bafc;                                    //          }
             #L02bade.  int_v3:= 1200I;                                                           //          else {
                                                                                                  //            int_v2 = int_v2 / 2;
             //Start of if elseif else part
             #L02bae2.  if int_v2 >= int_v3 then goto L02baec;                                    //          }
             #L02bae6.  int_v2:= int_v2 / 2;                                                      //        }
             #L02baea.  goto L02bada;                                                             //        int_v1 = int_v1 + 1;

                //else if part
             #L02baec.  if int_v2 >= int_v5 then goto L02baf6;                                    //      }
             #L02baf0.  int_v2:= int_v2 / 3;                                                      //      else {
             #L02baf4.  goto L02bada;                                                             //        int_v2 = int_v2 + 251;

                //else part
             #L02baf6.  int_v2:= int_v2 / 5;                                                      //        if(int_v2 <= int_v4) {
             #L02bafa.  goto L02bada;                                                             //          int_v1 = int_v1 + 1;
//~~~~~~~
             #L02bafc.  int_v1:= int_v1 + 1;                                                      //        }
             #L02bb00.  goto L02bab4;                                                             //        else {

             #L02bb02.  int_v0:= int_v0 + 1;                                                      //          if(int_v2 >= int_v5) {
             #L02bb06.  goto L02baa8;                                                             //            int_v2 = int_v2 / 3;
             #L02bb08.  int_v2:= int_v2 * 2;                                                      //          }
             #L02bb0c.  return int_v2;                                                            //          else {
                                                                                                  //            int_v2 = int_v2 / 2;
   }                                                                                              //          }
                                                                                                  //          int_v2 = int_v2 + 1;
                                                                                                  //          while(!(int_v2 <= int_v4)) {
                                                                                                  //            int_v3 = 1200;
                                                                                                  //            if(int_v2 >= int_v3) {
                                                                                                  //              if(int_v2 >= int_v5) {
                                                                                                  //                int_v2 = int_v2 / 5;
                                                                                                  //              }
                                                                                                  //              else {
                                                                                                  //                int_v2 = int_v2 / 3;
                                                                                                  //              }
                                                                                                  //            }
                                                                                                  //            else {
                                                                                                  //              int_v2 = int_v2 / 2;
                                                                                                  //            }
                                                                                                  //          }
                                                                                                  //          int_v1 = int_v1 + 1;
                                                                                                  //        }
                                                                                                  //      }
                                                                                                  //    }
                                                                                                  //    int_v0 = int_v0 + 1;
                                                                                                  //    int_v3 = 50;
                                                                                                  //  }
                                                                                                  //  int_v2 = int_v2 * 2;
                                                                                                  //  return int_v2;

    // infinite loop//
    procedure `int` `com.fgwei.ForLoop1.doWhileLoop` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.doWhileLoop:()I` @AccessFlag PRIVATE {
           `int` int_v2;                                                                  //     int int_v2;
           `int` int_v1;                                                                  //     int int_v1;
           `int` int_v0;                                                                  //     int int_v0;
                                                                                          //    int_v1 = 0;
         #L02b5ac.  int_v1:= 0I;                                                          //    int_v0 = 0;
         #L02b5ae.  int_v0:= 0I;                                                          //    do {
         #L02b5b0.  int_v1:= int_v1 + int_v0  @kind int;                                  //    int_v1 = int_v1 + int_v0;
         #L02b5b2.  int_v0:= int_v0 + 1;                                                  //    int_v0 = int_v0 + 1;
         #L02b5b6.  int_v2:= 50I;                                                         //    int_v2 = 50;
         #L02b5ba.  if int_v0 < int_v2 then goto L02b5b0;                                 //    } while(int_v0 < int_v2);
         #L02b5be.  return int_v1;                                                        //    return int_v1;
                                                                                          //  }
   }


   procedure `int` `com.fgwei.ForLoop1.doWhileNested` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.doWhileNested:()I` @AccessFlag PRIVATE {
         `int` int_v2;
            `int` int_v1;
            `int` int_v0;

          #L02b818.  int_v1:= 0I;
          #L02b81a.  int_v0:= 0I;
          #L02b81c.  int_v1:= int_v1 + int_v0  @kind int;
          #L02b81e.  int_v1:= int_v1 + 1;
          #L02b822.  int_v2:= 500I;
          #L02b826.  if int_v1 < int_v2 then goto L02b81e;
          #L02b82a.  int_v0:= int_v0 + 1;
          #L02b82e.  int_v2:= 50I;
          #L02b832.  if int_v0 < int_v2 then goto L02b81c;
          #L02b836.  return int_v1;
   }

   procedure `int` `com.fgwei.ForLoop1.doWhileNested1` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.doWhileNested1:()I` @AccessFlag PRIVATE {
          `int` int_v2;                                                                    //    int int_v2;
             `int` int_v1;                                                                 //    int int_v1;
             `int` int_v0;                                                                 //    int int_v0;
                                                                                           //   int_v1 = 0;
           #L02b86c.  int_v1:= 0I;                                                         //   int_v0 = 0;
           #L02b86e.  int_v0:= 0I;                                                         //   int_v1 = int_v1 + int_v0;
           #L02b870.  int_v1:= int_v1 + int_v0  @kind int;                                 //   do {
           #L02b872.  int_v2:= 200I;                                                       //   int_v2 = 200;
           #L02b876.  if int_v1 >= int_v2 then goto L02b894;                               //   if(int_v1 >= int_v2) {
           #L02b87a.  int_v1:= int_v1 + 5;                                                 //     int_v1 = int_v1 + 1;
           #L02b87e.  int_v2:= 500I;                                                       //   }
           #L02b882.  if int_v1 < int_v2 then goto L02b872;                                //   else {
           #L02b886.  int_v0:= int_v0 + 1;                                                 //     int_v1 = int_v1 + 5;
           #L02b88a.  int_v2:= 50I;                                                        //   }
           #L02b88e.  if int_v0 < int_v2 then goto L02b870;                                //   int_v2 = 500;
           #L02b892.  return int_v1;                                                       //   } while(int_v1 < int_v2);
           #L02b894.  int_v1:= int_v1 + 1;                                                 // }
           #L02b898.  goto L02b87e;                                                        //
   }


   procedure `int` `com.fgwei.ForLoop1.doWhileNested2` (`com.fgwei.ForLoop1` ForLoop1 @kind `this`) @owner ^`com.fgwei.ForLoop1` @signature `Lcom/fgwei/ForLoop1;.doWhileNested2:()I` @AccessFlag PRIVATE {
           `int` int_v2;                                                                  //
              `int` int_v1;                                                               //
              `int` int_v0;                                                               //
                                                                                          //
                #L02b8ac.  int_v1:= 0I;                                                       //
                #L02b8ae.  int_v0:= 0I;                                                       //
                #L02b8b0.  int_v1:= int_v1 + int_v0  @kind int;                               //
                #L02b8b2.  int_v2:= 600I;                                                     //
                                                                                          //
            //if 1                                                                        //
                #L02b8b6.  if int_v1 >= int_v2 then goto L02b8ce;                             //
                #L02b8ba.  int_v2:= 200I;                                                     //
                                                                                          //
            //if 2                                                                        //
                #L02b8be.  if int_v1 >= int_v2 then goto L02b8dc;                             //
                #L02b8c2.  int_v1:= int_v1 + 5;                                               //
            #L02b8c6.  int_v2:= 500I;                                                     //
                                                                                          //
            // do Loop 2                                                                  //
            #L02b8ca.  if int_v1 < int_v2 then goto L02b8ba;                              //
                                                                                          //
                #L02b8ce.  int_v0:= int_v0 + 1;                                               //
                #L02b8d2.  int_v2:= 50I;                                                      //
                                                                                          //
            //do Loop 1                                                                   //
                #L02b8d6.  if int_v0 < int_v2 then goto L02b8b0;                              //
            #L02b8da.  return int_v1;                                                     //
                                                                                          //
                #L02b8dc.  int_v1:= int_v1 + 1;                                               //
            #L02b8e0.  goto L02b8c6;                                                      //
   }


