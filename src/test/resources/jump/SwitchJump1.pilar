record `com.fgwei.SwitchJump1`  @kind class @AccessFlag PUBLIC {
   }
    procedure `int` `com.fgwei.SwitchJump1.main` () @owner ^`com.fgwei.SwitchJump1` @signature `Lcom/fgwei/SwitchJump1;.main:()I` @AccessFlag PUBLIC_STATIC {
      `int` int_v1;
      `int` int_v2;
      
#L026e42.   int_v1:= 2130903040I  @kind int;
#L026e4c.   int_v2:= 3I  @kind int;
#L028a16.   goto L028c28;
#L026e5a.   int_v1:= 0I  @kind int;
#L026eb0.   return int_v1;
#L028c28.   switch  int_v2
                 | 0 => goto L026e5a
                 | else => goto L026eb0;
   }

   procedure `int` `com.fgwei.SwitchJump1.SwitchJump2` (`com.fgwei.SwitchJump1` ForLoop1 @kind `this`) @owner ^`com.fgwei.SwitchJump1` @signature `Lcom/fgwei/SwitchJump1;.SwitchJump2:()I` @AccessFlag PRIVATE {
     `java.lang.String` String_v3;
         `java.lang.StringBuilder` StringBuilder_v2;
         `java.io.PrintStream` PrintStream_v1;
         `int` int_v0;
         `java.lang.StringBuilder` StringBuilder_temp;
         `java.lang.String` String_v2;
         `java.lang.String` String_temp;
         `char` char_v0;

       #L02bd48.
       #L02bd48_0.  int_v0:= 67I;
       #L02bd48_1.  char_v0:= 67I;
       #L02bd4c.  goto L02bdd0;
       #L02bd52.  PrintStream_v1:= `@@java.lang.System.out`  @kind object @type ^`java.io.PrintStream`;
       #L02bd56.  String_v2:= "Invalid grade" @kind object;
       #L02bd5a.  call `java.io.PrintStream.println`(PrintStream_v1, String_v2) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @classDescriptor ^`java.io.PrintStream` @kind virtual;
       #L02bd60.  PrintStream_v1:= `@@java.lang.System.out`  @kind object @type ^`java.io.PrintStream`;
       #L02bd64.  StringBuilder_v2:= new `java.lang.StringBuilder`;
       #L02bd68.  call `java.lang.StringBuilder.<init>`(StringBuilder_v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @classDescriptor ^`java.lang.StringBuilder` @kind direct;
       #L02bd6e.  String_v3:= "Your grade is " @kind object;
       #L02bd72.  call StringBuilder_temp:=  `java.lang.StringBuilder.append`(StringBuilder_v2, String_v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @classDescriptor ^`java.lang.StringBuilder` @kind virtual;
       #L02bd78.  StringBuilder_v2:= StringBuilder_temp  @kind object;
       #L02bd7a.  call StringBuilder_temp:=  `java.lang.StringBuilder.append`(StringBuilder_v2, char_v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @classDescriptor ^`java.lang.StringBuilder` @kind virtual;
       #L02bd80.  StringBuilder_v2:= StringBuilder_temp  @kind object;
       #L02bd82.  call String_temp:=  `java.lang.StringBuilder.toString`(StringBuilder_v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @classDescriptor ^`java.lang.StringBuilder` @kind virtual;
       #L02bd88.  String_v2:= String_temp  @kind object;
       #L02bd8a.  call `java.io.PrintStream.println`(PrintStream_v1, String_v2) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @classDescriptor ^`java.io.PrintStream` @kind virtual;
       #L02bd90.  return char_v0;
       #L02bd92.  PrintStream_v1:= `@@java.lang.System.out`  @kind object @type ^`java.io.PrintStream`;
       #L02bd96.  String_v2:= "Excellent!" @kind object;
       #L02bd9a.  call `java.io.PrintStream.println`(PrintStream_v1, String_v2) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @classDescriptor ^`java.io.PrintStream` @kind virtual;
       #L02bda0.  goto L02bd60;
       #L02bda2.  PrintStream_v1:= `@@java.lang.System.out`  @kind object @type ^`java.io.PrintStream`;
       #L02bda6.  String_v2:= "Well done" @kind object;
       #L02bdaa.  call `java.io.PrintStream.println`(PrintStream_v1, String_v2) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @classDescriptor ^`java.io.PrintStream` @kind virtual;
       #L02bdb0.  goto L02bd60;
       #L02bdb2.  PrintStream_v1:= `@@java.lang.System.out`  @kind object @type ^`java.io.PrintStream`;
       #L02bdb6.  String_v2:= "You passed" @kind object;
       #L02bdba.  call `java.io.PrintStream.println`(PrintStream_v1, String_v2) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @classDescriptor ^`java.io.PrintStream` @kind virtual;
       #L02bdc0.  PrintStream_v1:= `@@java.lang.System.out`  @kind object @type ^`java.io.PrintStream`;
       #L02bdc4.  String_v2:= "Better try again" @kind object;
       #L02bdc8.  call `java.io.PrintStream.println`(PrintStream_v1, String_v2) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @classDescriptor ^`java.io.PrintStream` @kind virtual;
       #L02bdce.  goto L02bd60;
       #L02bdd0.  switch int_v0
                       | 65 => goto L02bd92
                       | 66 => goto L02bda2
                       | 67 => goto L02bda2
                       | 68 => goto L02bdb2
                       | 69 => goto L02bd52
                       | 70 => goto L02bdc0
                       | else => goto L02bd52;
   }

 procedure `int` `com.fgwei.SwitchJump1.switchStatement1` (`com.fgwei.SwitchJump1` ForLoop1 @kind `this`) @owner ^`com.fgwei.switchStatement1` @signature `Lcom/fgwei/SwitchJump1;.switchStatement1:()I` @AccessFlag PRIVATE {
        `int` int_v2;
           `int` int_v1;
           `int` int_v0;

         #L02be2c.  int_v0:= 67I;
         #L02be30.  int_v1:= 0I;
         #L02be32.  goto L02be70;
         #L02be38.  int_v1:= int_v1 + 7;
         #L02be3c.  int_v1:= int_v1 + 8;
         #L02be40.  return int_v1;
         #L02be42.  int_v1:= int_v1 + 1;
         #L02be46.  int_v2:= 97I;
         #L02be4a.  goto L02be90;
         #L02be50.  goto L02be3c;
         #L02be52.  int_v1:= int_v1 + 2;
         #L02be56.  goto L02be3c;
         #L02be58.  int_v1:= int_v1 + 3;
         #L02be5c.  goto L02be3c;
         #L02be5e.  int_v1:= int_v1 + 4;
         #L02be62.  goto L02be3c;
         #L02be64.  int_v1:= int_v1 + 5;
         #L02be68.  int_v1:= int_v1 + 6;
         #L02be6c.  goto L02be3c;
         #L02be70.  switch int_v0
                         | 65 => goto L02be42
                         | 66 => goto L02be5e
                         | 67 => goto L02be5e
                         | 68 => goto L02be64
                         | 69 => goto L02be38
                         | 70 => goto L02be68
                         | else => goto L02be38;
         #L02be90.  switch int_v2
                         | 97 => goto L02be52
                         | 98 => goto L02be58
                         | else => goto L02be50;
   }

 procedure `int` `com.fgwei.SwitchJump1.switchStatement2` (`com.fgwei.SwitchJump1` ForLoop1 @kind `this`) @owner ^`com.fgwei.switchStatement2` @signature `Lcom/fgwei/SwitchJump1;.switchStatement2:()I` @AccessFlag PRIVATE {
    `int` int_v2;
       `int` int_v0;
       `int` int_v3;
       `int` int_v1;

     #L02beb0.  int_v0:= 67I;
     #L02beb4.  int_v1:= 0I;
     #L02beb6.  goto L02bf08;

     // Switch 1: case default
     #L02bebc.  int_v1:= int_v1 + 7;

     //After Switch
     #L02bec0.  int_v1:= int_v1 + 8;
     #L02bec4.  return int_v1;

     // Switch 1: case 65
     #L02bec6.  int_v1:= int_v1 + 1;
     #L02beca.  int_v2:= 97I;
        //Switch 2:
        #L02bece.  goto L02bf28;

        //Switch 2: case default
        #L02bed4.  goto L02bec0;

        //Switch 2: case 97
        #L02bed6.  int_v1:= int_v1 + 2;

        //Switch 2: case 97, 98
        #L02beda.  int_v1:= int_v1 + 3;
        #L02bede.  int_v3:= 97I;

            //Switch 2: case 97, 98 if statement
            #L02bee2.  if int_v2 != int_v3 then goto L02beea;
            #L02bee6.  int_v1:= int_v1 + 1;
            #L02beea.  int_v3:= 8I;

            //Switch 2: case 97, 98 while loop
            #L02beee.  if int_v1 >= int_v3 then goto L02bec0;
            #L02bef2.  int_v1:= int_v1 + 2;
            #L02bef6.  goto L02beea;

     // Switch 1: case 66, 67
     #L02bef8.  int_v1:= int_v1 + 4;
     #L02befc.  goto L02bec0;

     // Switch 1: case 68
     #L02befe.  int_v1:= int_v1 + 5;

     // Switch 1: case 70
     #L02bf02.  int_v1:= int_v1 + 6;
     #L02bf06.  goto L02bec0;
     #L02bf08.  switch int_v0
                     | 65 => goto L02bec6
                     | 66 => goto L02bef8
                     | 67 => goto L02bef8
                     | 68 => goto L02befe
                     | 69 => goto L02bebc
                     | 70 => goto L02bf02
                     | else => goto L02bebc;
     #L02bf28.  switch int_v2
                     | 97 => goto L02bed6
                     | 98 => goto L02beda
                     | else => goto L02bed4;

   }

procedure `int` `com.fgwei.SwitchJump1.loops`(`com.fgwei.SwitchJump1` ForLoop1 @kind this, `int` int_v3 ) @owner ^`com.fgwei.switchStatement3` @signature `Lcom/fgwei/SwitchJump1;.loops:(I)I` @AccessFlag PRIVATE {
    `int` int_v1;
    `int` int_v0;

  #L02bd78.  int_v1:= 5I;
  #L02bd7a.  int_v0:= 0I;
  #L02bd7c.  if int_v3 >= int_v1 then goto L02bd8c;
  #L02bd80.  if int_v3 >= int_v1 then goto L02bd8c;
  #L02bd84.  int_v0:= int_v0 + int_v3  @kind int;
  #L02bd86.  int_v3:= int_v3 + 1;
  #L02bd8a.  goto L02bd80;
  #L02bd8c.  int_v0:= int_v3 + 100;
  #L02bd90.  return int_v0;
}

procedure `int` `com.fgwei.SwitchJump1.loops2`(`com.fgwei.SwitchJump1` ForLoop1 @kind this, `int` int_v3 ) @owner ^`com.fgwei.switchStatement3` @signature `Lcom/fgwei/SwitchJump1;.loops2:(I)I` @AccessFlag PRIVATE {
    `int` int_v1;
    `int` int_v0;

  #L02bda4.  int_v1:= 5I;
  #L02bda6.  int_v0:= 0I;
  #L02bda8.  if int_v3 >= int_v1 then goto L02bdb0;
  #L02bdac.  int_v3:= int_v3 * 50;
  #L02bdb0.  if int_v3 <= int_v1 then goto L02bdbc;
  #L02bdb4.  int_v0:= int_v0 + int_v3  @kind int;
  #L02bdb6.  int_v3:= int_v3 + 255;
  #L02bdba.  goto L02bdb0;
  #L02bdbc.  int_v0:= int_v0 + 700;
  #L02bdc0.  return int_v0;
}
procedure `int` `com.fgwei.SwitchJump1.loops3`(`com.fgwei.SwitchJump1` ForLoop1 @kind this, `int` int_v3 ) @owner ^`com.fgwei.switchStatement3` @signature `Lcom/fgwei/SwitchJump1;.loops3:(I)I` @AccessFlag PRIVATE {
    `int` int_v1;
    `int` int_v0;

  #L02bd98.  int_v1:= 5I;
  #L02bd9a.  int_v0:= 0I;
  #L02bd9c.  if int_v3 >= int_v1 then goto L02bdaa;
  #L02bda0.  int_v3:= int_v3 * 100;
  #L02bda4.  int_v0:= int_v3 + 600;
  #L02bda8.  return int_v0;
  #L02bdaa.  if int_v3 <= int_v1 then goto L02bda4;
  #L02bdae.  int_v0:= int_v3 + 100;
  #L02bdb2.  int_v3:= int_v3 + 255;
  #L02bdb6.  goto L02bdaa;
}

procedure `int` `com.fgwei.SwitchJump1.ifElse`(`com.fgwei.SwitchJump1` ForLoop1 @kind this, `int` int_v3 ) @owner ^`com.fgwei.switchStatement3` @signature `Lcom/fgwei/SwitchJump1;.ifElse:(I)I` @AccessFlag PRIVATE {
    `int` int_v1;
    `int` int_v0;

  #L02bd50.  int_v0:= 0I;
  #L02bd52.  int_v1:= 5I;
  #L02bd54.  if int_v3 >= int_v1 then goto L02bd60;
  #L02bd58.  int_v3:= int_v3 * 100;
  #L02bd5c.  int_v1:= int_v3;
  #L02bd5e.  return int_v1;
  #L02bd60.  int_v0:= int_v3 + 600;
  #L02bd64.  int_v1:= int_v0;                         //needs int_v1:=int_v0;
  #L02bd66.  goto L02bd5e;
}

   procedure `int` `com.fgwei.SwitchJump1.switchStatement3` (`com.fgwei.SwitchJump1` ForLoop1 @kind `this`) @owner ^`com.fgwei.switchStatement3` @signature `Lcom/fgwei/SwitchJump1;.switchStatement3:()I` @AccessFlag PRIVATE {

   `int` int_v2;
       `int` int_v0;
       `int` int_v3;
       `int` int_v1;

     #L02bf68.  int_v0:= 67I;
     #L02bf6c.  int_v1:= 0I;
     #L02bf6e.  goto L02bfc0;
     #L02bf74.  int_v1:= int_v1 + 7;
     #L02bf78.  int_v1:= int_v1 + 8;
     #L02bf7c.  return int_v1;
     #L02bf7e.  int_v1:= int_v1 + 1;
     #L02bf82.  int_v2:= 97I;
     #L02bf86.  goto L02bfe0;
     #L02bf8c.  goto L02bf78;
     #L02bf8e.  int_v1:= int_v1 + 2;
     #L02bf92.  int_v1:= int_v1 + 3;
     #L02bf96.  int_v3:= 97I;
     #L02bf9a.  if int_v2 != int_v3 then goto L02bf78;
     #L02bf9e.  int_v1:= int_v1 + 1;
     #L02bfa2.  int_v3:= 8I;
     #L02bfa6.  if int_v1 >= int_v3 then goto L02bf78;
     #L02bfaa.  int_v1:= int_v1 + 2;
     #L02bfae.  goto L02bfa2;
     #L02bfb0.  int_v1:= int_v1 + 4;
     #L02bfb4.  goto L02bf78;
     #L02bfb6.  int_v1:= int_v1 + 5;
     #L02bfba.  int_v1:= int_v1 + 6;
     #L02bfbe.  goto L02bf78;
     #L02bfc0.  switch int_v0
                     | 65 => goto L02bf7e
                     | 66 => goto L02bfb0
                     | 67 => goto L02bfb0
                     | 68 => goto L02bfb6
                     | 69 => goto L02bf74
                     | 70 => goto L02bfba
                     | else => goto L02bf74;
     #L02bfe0.  switch int_v2
                     | 97 => goto L02bf8e
                     | 98 => goto L02bf92
                     | else => goto L02bf8c;
     }
